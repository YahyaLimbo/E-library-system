# Application Name
spring.application.name=treviska
server.error.include-message=always
server.error.include-binding-errors=always
server.error.include-stacktrace=always
server.error.include-exception=true
logging.level.com.mycompany.treviska=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Show SQL parameters
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Root logger level
logging.level.root=INFO
# Server Configuration
server.port=8080
logging.level.org.springframework.web=DEBUG
management.endpoints.web.exposure.include=*
management.endpoint.mappings.enabled=true
# Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/e-library
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA / Hibernate Configuration
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

#spring.security.enabled=false
#spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration


# Security Configuration (optional if you're not using OAuth2 yet)
# Comment these out if you haven't implemented OAuth2/JWT token verification
# spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080
# spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/.well-known/jwks.json
# Show exact SQL that Hibernate generates:
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# File upload settings for database storage
spring.servlet.multipart.max-file-size=50MB
spring.servlet.multipart.max-request-size=50MB

# Database settings for large BLOBs
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.connection-timeout=60000

# Enable detailed SQL parameter logging
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.hibernate.orm.jdbc.bind=TRACE
# Add these to your application.properties for detailed security logging
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.access=TRACE
logging.level.org.springframework.security.authorization=TRACE
logging.level.org.springframework.web.servlet.mvc.method.annotation=DEBUG
logging.level.com.mycompany.treviska=DEBUG
# Show parameter values
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Force the correct PostgreSQL dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Fix LOB handling
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.hibernate.ddl-auto=create
# --- JWT ---
jwt.public-key-location=file:${JWT_PUBLIC_KEY_PATH}
jwt.private-key-location=file:${JWT_PRIVATE_KEY_PATH}
jwt.ttl=PT4H